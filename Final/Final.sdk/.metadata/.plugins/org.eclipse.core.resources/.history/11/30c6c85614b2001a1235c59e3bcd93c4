/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <string.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "ff.h"
#include "sleep.h"
#include "xstatus.h"
#include "xil_io.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xil_cache.h"
#include "xsdps.h"

#define INITIAL_VALUE 0x6a09e667

XGpio LEDInst, PUSH_SWInst, LCD_Inst, Hash_data, Hash_ctrl;
XScuGic INTCInst;
static int push_sw_data;
static int mode; 	// 0: select file, 1: readfile, find hash, 2: save hash
static int button; 	// 1, 2, 3, 4
u32 hash_data;
int fileIdx;
int addressIdx;

FIL fil;
FILINFO fno[100];
FRESULT res;
DIR dir;
FATFS fs32;
char dataBuffer[4];

//function list
void BTN_Intr_Handler(void *InstancePtr);
int InterruptSystemSetup(XScuGic *XScuGicInstancePtr);
int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr);
void display_LCD(int alpha);
void init_LCD();
void clear_LCD();
void f_opendir_scan(char *Path);
void fileRead(int idx, char* path);
u32 string2hex(char* msg);
void hash_write(char* buf, u32 Seed);
void display_string(char* msg);
int find_hash();

// Interrupt Handler
#define BTN_INT XGPIO_IR_CH1_MASK

int main() {
	xil_printf("Hello\n\r");

	int status;
	u32 IV = INITIAL_VALUE;
	TCHAR *Path="0:/";
	char* fileName;

	// Initialize LCD
	status =XGpio_Initialize(&LCD_Inst, XPAR_LCD_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("LCD initialize failed");
		return XST_FAILURE;
	}

	// Initialize Push Buttons
	status = XGpio_Initialize(&PUSH_SWInst, XPAR_PUSH_SW_DEVICE_ID);
	if (status != XST_SUCCESS) {
		xil_printf("PUSH BUTTONS initialize failed");
		return XST_FAILURE;
	}

	// Hash initialize
	status=XGpio_Initialize(&Hash_data,XPAR_HASH_DATA_DEVICE_ID);
	if(status!=XST_SUCCESS) {
		xil_printf("Hash_data Gpio initialize failed");
		return XST_FAILURE;
	}

	status=XGpio_Initialize(&Hash_ctrl,XPAR_HASH_CTRL_DEVICE_ID);
	if(status!=XST_SUCCESS) {
		xil_printf("Hash_ctrl Gpio initialize failed");
		return XST_FAILURE;
	}

	status=XGpio_Initialize(&LEDInst,XPAR_LED_DEVICE_ID);
	if(status!=XST_SUCCESS) {
		xil_printf("LED Gpio initialize failed");
		return XST_FAILURE;
	}

	/* Set gpio direction */
	// Set LCD direction to outputs
	XGpio_SetDataDirection(&LCD_Inst, 1, 0x00);
	// Set all buttons direction to inputs
	XGpio_SetDataDirection(&PUSH_SWInst, 1, 0xFF);
	// Set Hash direction
	XGpio_SetDataDirection(&Hash_data,1,0x00); // data_in
	XGpio_SetDataDirection(&Hash_data,2,0xff); // data_out
	XGpio_SetDataDirection(&Hash_ctrl,1,0x00); // reset
	XGpio_SetDataDirection(&Hash_ctrl,2,0x00); // Seed
	// Set LED direction
	XGpio_SetDataDirection(&LEDInst,1,0xff);

	// Initialize interrupt controller
	status = IntcInitFunction(XPAR_PS7_SCUGIC_0_DEVICE_ID, &PUSH_SWInst);
	if (status != XST_SUCCESS) {
		xil_printf("Interrupt controller initialize failed");
		return XST_FAILURE;
	}

	char* buf=""; 						// 첫번째 해쉬 출력은 버려야 함
	hash_write(buf,IV);

	//////////////////////////////////////////////////////

	fileIdx=0;							// fileIndex initialize
	init_LCD();
	display_string("Hasher Program");
	for(int i=1;i<=8;i++) {				// 2sec hold, led loading
		XGpio_DiscreteWrite(&LEDInst,1,(1<<i));
		usleep(250000);
	}
	XGpio_DiscreteWrite(&LEDInst,1,0);	// Turn off LED
	addressIdx=-32;						// addr initialize, 처음 저장하는 장소를 BASEADDR로 하기 위함


	int idx=1; 							// file idx, 0: Root "0:/"
	int isMount=0;
	mode=0;

	while(1) {
		res=f_mount(&fs32,Path,1);		// SD가 마운트 되어있는지 계속 확인
		if(res!=FR_OK) {
			XGpio_DiscreteWrite(&LEDInst,1,0x80);
			xil_printf("unmounted\n\r");
			display_string("Unmounted");
			isMount=0;
			continue;
		}
		else {
			isMount=1;
			fileIdx=0;
			f_opendir_scan(Path);
			XGpio_DiscreteWrite(&LEDInst,1,0x40);
		}

		if(isMount && mode==0) {
			XGpio_DiscreteWrite(&LEDInst,1,0x41);
			if(button==1) { 			// up index
				idx++;
				if(idx>fileIdx) idx=1;
				button=0;
			}
			else if(button==2) { 		// down index
				idx--;
				if(idx<1) idx=fileIdx;
				button=0;
			}
			else if(button==3) mode=1, button=0;

			fileName=fno[idx].fname;
			display_string(fileName);
		}

		else if(isMount && mode==1) {
			XGpio_DiscreteWrite(&LEDInst,1,0x42);
			xil_printf("\n");
			fileRead(idx, Path); 		// Select this file and calculate hash

			if(find_hash()) { 			// same hash in memory, this file is original
				xil_printf("original file\n\r");

				display_string("Origianl file");
				sleep(2); // 2sec hold

				mode=0;
			}
			else { 						// not in memory or this is not original
				xil_printf("not original file\n\r");

				display_string("Not original file");
				sleep(2); 				// 1sec hold

				mode=2;
			}
			xil_printf("\n");
		}

		else if(isMount && mode==2) {
			XGpio_DiscreteWrite(&LEDInst,1,0x44);
			xil_printf("save the file?\r");

			display_string("Save the file?");

			if(button==1) {
				addressIdx+=32;
				xil_printf("\nyes, addr=%d\n\r",addressIdx);
				Xil_Out32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR+addressIdx,hash_data);
				xil_printf("addr=%d, complete save\n\r",addressIdx);
				button=0;
				mode=0;
			}
			else if(button==2){
				xil_printf("\nno\n\r");
				button=0;
				mode=0;
			}
		}
	}
    return 0;
}

void BTN_Intr_Handler(void *InstancePtr) {
	// Disable GPIO interrupts
	XGpio_InterruptDisable(&PUSH_SWInst,BTN_INT);

	// Ignore additional button presses
	if ((XGpio_InterruptGetStatus(&PUSH_SWInst) & BTN_INT) != BTN_INT) return;

	// Increment counter based on button value
	// Reset if central button pressed
	push_sw_data = XGpio_DiscreteRead(&PUSH_SWInst, 1);

	if(push_sw_data==14) button=1;
	else if(push_sw_data==13) button=2;
	else if(push_sw_data==11) button=3;
	else if(push_sw_data==7) button=4;
	else button=5;

	(void) XGpio_InterruptClear(&PUSH_SWInst, BTN_INT);

	// Enable GPIO interrupts
	XGpio_InterruptEnable(&PUSH_SWInst, BTN_INT);
}

//인터럽트 시스템
int InterruptSystemSetup(XScuGic *XScuGicInstancePtr) {
	// Enable interrupt
	XGpio_InterruptEnable(&PUSH_SWInst, BTN_INT);
	XGpio_InterruptGlobalEnable(&PUSH_SWInst);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler,
			XScuGicInstancePtr);
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

int IntcInitFunction(u16 DeviceId, XGpio *GpioInstancePtr) {
	XScuGic_Config *IntcConfig;
	int status;

	// Interrupt controller initialization
	IntcConfig = XScuGic_LookupConfig(DeviceId);
	status = XScuGic_CfgInitialize(&INTCInst, IntcConfig,
			IntcConfig->CpuBaseAddress);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Call to interrupt setup
	status = InterruptSystemSetup(&INTCInst);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Connect GPIO interrupt to handler
	status = XScuGic_Connect(&INTCInst, XPAR_FABRIC_PUSH_SW_IP2INTC_IRPT_INTR,
			(Xil_ExceptionHandler) BTN_Intr_Handler, (void *) GpioInstancePtr);
	if (status != XST_SUCCESS)
		return XST_FAILURE;

	// Enable GPIO interrupts interrupt
	XGpio_InterruptEnable(GpioInstancePtr, 1);
	XGpio_InterruptGlobalEnable(GpioInstancePtr);

	// Enable GPIO and timer interrupts in the controller
	XScuGic_Enable(&INTCInst, XPAR_FABRIC_PUSH_SW_IP2INTC_IRPT_INTR);

	return XST_SUCCESS;
}

//text-LCD initialize
void init_LCD() {
    XGpio_DiscreteWrite(&LCD_Inst, 1, 56);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 312);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 56);
	usleep(4000);

	XGpio_DiscreteWrite(&LCD_Inst, 1, 14);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 270);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 14);
	usleep(4000);

	XGpio_DiscreteWrite(&LCD_Inst, 1, 6);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 262);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 6);
	usleep(4000);

	XGpio_DiscreteWrite(&LCD_Inst, 1, 1);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 257);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 1);
	usleep(4000);
}

//특정 문자를 LCD로 출력하기위한 함수
void display_LCD(int alpha) {
    XGpio_DiscreteWrite(&LCD_Inst, 1, alpha+1024);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, alpha+1280);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, alpha+1024);
	usleep(4000);
}

//LCD clear
void clear_LCD() {
	XGpio_DiscreteWrite(&LCD_Inst, 1, 1);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 257);
	usleep(6000);
	XGpio_DiscreteWrite(&LCD_Inst, 1, 1);
	usleep(4000);
}

void f_opendir_scan(char *Path) {

    #if _USE_LFN
    TCHAR lfn[_MAX_LFN + 1];
    fno.lfname = lfn;
    fno.lfsize = sizeof lfn;
    #endif
    TCHAR path[200] = "";
    res = f_mount(&fs32,Path,1);
//  printf("SD Mount : res f_mount : %02X\n\r",res);

    if (res == FR_OK)
    {
    	res = f_opendir(&dir,path);
//      printf("res f_open : %02X\n\r",res);
        if (res == FR_OK)
        {
        	while(1)
        	{
				res = f_readdir(&dir, &fno[fileIdx]);

				if(res!=FR_OK) display_string("Empty folder");

				if ((res != FR_OK) || (fno[fileIdx].fname[0] == 0)) break;
				else fileIdx++;

//				#if _USE_LFN
//					  fn = *fno.lfname ? fno.lfname : fno.fname;
//				#else
//					  fn = fno[fileIdx].fname;
//				#endif
//
//				printf("%s/%s\n\r", path, fn);
			}

		}
        res=f_closedir(&dir);
    }
    res = f_mount(0,Path,0); // Unmount
    fileIdx-=1;
}

void fileRead(int idx, char* path) { // fileNumber, file path
	UINT br;
	char *fn;

	res = f_mount(&fs32,path,1);
	if(res!=FR_OK) {
		xil_printf("failed mount\n\r");
		return;
	}

	fn=fno[idx].fname;
	if(fn==0) return;

	res=f_open(&fil,fn,FA_READ);
	DWORD fileLen=fil.fsize;
	char *buf = (int*)malloc(fileLen);

	if(res==FR_OK) {
		res=f_read(&fil,(void*)buf,fileLen,&br);
		for(int i=0;i<fileLen;i++) xil_printf("%s\n\r",buf[i]);
	}

	/*
	if(res==FR_OK) {
		int cnt=0;
		while(1) {
			memset(dataBuffer,0,sizeof(dataBuffer)); // clear buffer

			res=f_read(&fil,(void*)dataBuffer,4,&br);

			if(dataBuffer[0]!=0) {
				if(cnt==0) hash_write(dataBuffer,INITIAL_VALUE);
				else hash_write(dataBuffer,hash_data);
			}
			else { // End Of File
				xil_printf("Hash : %X\n\r",hash_data);
				break;
			}
		}
	}
	else {
		xil_printf("failed open\n\r"); display_string("failed open");
	}
	*/

	res=f_close(&fil); // file close
	res = f_mount(&fs32,path,0); // Unmount
}

u32 string2hex(char* msg) { // 4Bytes String
	u32 res=0;
	res += ((msg[0]<<24) + (msg[1]<<16) + (msg[2]<<8) + msg[3]);
	return res;
}

void hash_write(char* buf, u32 Seed) {
	XGpio_DiscreteWrite(&Hash_ctrl,1,0); // nRST = 1

	XGpio_DiscreteWrite(&Hash_ctrl,1,1); // nRST = 0
	XGpio_DiscreteWrite(&Hash_ctrl,2,Seed); // Seed
	XGpio_DiscreteWrite(&Hash_data,1,string2hex(buf));

	hash_data=XGpio_DiscreteRead(&Hash_data,2);
}

void display_string(char* msg) {
	clear_LCD();
	for(int i=0;i<strlen(msg);i++) display_LCD(msg[i]);
}

int find_hash() {
	if(addressIdx==-32) return 0;
	else {
		for(int i=0;i<=addressIdx;i+=32) {
			u32 readMemoryData=Xil_In32(XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR+i);
			if(hash_data==readMemoryData) return 1;
		}
	}
	return 0;
}

